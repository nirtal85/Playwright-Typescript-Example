# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Persistence >> get started f
- Location: /__w/Playwright-Typescript-Example/Playwright-Typescript-Example/tests/demo-todo-app.spec.ts:289:3

# Error details

```
Error: locator.check: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByTestId('todo-item').first().getByRole('checkbox')

    at /__w/Playwright-Typescript-Example/Playwright-Typescript-Example/tests/demo-todo-app.spec.ts:305:28
```

# Page snapshot

```yaml
- text: This is just a demo of TodoMVC for testing, not the
- link "real TodoMVC app."
- heading "todos" [level=1]
- textbox "What needs to be done?"
- checkbox "❯Mark all as complete"
- text: ❯Mark all as complete
- list:
  - listitem:
    - checkbox "Toggle Todo"
    - text: buy some cheese
  - listitem:
    - checkbox "Toggle Todo"
    - text: feed the cat
- strong: "2"
- text: items left
- list:
  - listitem:
    - link "All"
  - listitem:
    - link "Active"
  - listitem:
    - link "Completed"
- contentinfo:
  - paragraph: Double-click to edit a todo
  - paragraph:
    - text: Created by
    - link "Remo H. Jansen"
  - paragraph:
    - text: Part of
    - link "TodoMVC"
```

# Test source

```ts
  205 |     const todoItems = page.getByTestId('todo-item');
  206 |     await todoItems.nth(1).dblclick();
  207 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');
  208 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).dispatchEvent('blur');
  209 |
  210 |     await expect(todoItems).toHaveText([TODO_ITEMS[0], 'buy some sausages', TODO_ITEMS[2]]);
  211 |     await checkTodosInLocalStorage(page, 'buy some sausages');
  212 |   });
  213 |
  214 |   test('should trim entered text', async ({ page }) => {
  215 |     const todoItems = page.getByTestId('todo-item');
  216 |     await todoItems.nth(1).dblclick();
  217 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('    buy some sausages    ');
  218 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter');
  219 |
  220 |     await expect(todoItems).toHaveText([TODO_ITEMS[0], 'buy some sausages', TODO_ITEMS[2]]);
  221 |     await checkTodosInLocalStorage(page, 'buy some sausages');
  222 |   });
  223 |
  224 |   test('should remove the item if an empty text string was entered', async ({ page }) => {
  225 |     const todoItems = page.getByTestId('todo-item');
  226 |     await todoItems.nth(1).dblclick();
  227 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('');
  228 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter');
  229 |
  230 |     await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]]);
  231 |   });
  232 |
  233 |   test('should cancel edits on escape', async ({ page }) => {
  234 |     const todoItems = page.getByTestId('todo-item');
  235 |     await todoItems.nth(1).dblclick();
  236 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');
  237 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Escape');
  238 |     await expect(todoItems).toHaveText(TODO_ITEMS);
  239 |   });
  240 | });
  241 |
  242 | test.describe('Counter', () => {
  243 |   test('should display the current number of todo items', async ({ page }) => {
  244 |     // create a new todo locator
  245 |     const newTodo = page.getByPlaceholder('What needs to be done?');
  246 |
  247 |     // create a todo count locator
  248 |     const todoCount = page.getByTestId('todo-count');
  249 |
  250 |     await newTodo.fill(TODO_ITEMS[0]);
  251 |     await newTodo.press('Enter');
  252 |
  253 |     await expect(todoCount).toContainText('1');
  254 |
  255 |     await newTodo.fill(TODO_ITEMS[1]);
  256 |     await newTodo.press('Enter');
  257 |     await expect(todoCount).toContainText('2');
  258 |
  259 |     await checkNumberOfTodosInLocalStorage(page, 2);
  260 |   });
  261 | });
  262 |
  263 | test.describe('Clear completed button', () => {
  264 |   test.beforeEach(async ({ page }) => {
  265 |     await createDefaultTodos(page);
  266 |   });
  267 |
  268 |   test('should display the correct text', async ({ page }) => {
  269 |     await page.locator('.todo-list li .toggle').first().check();
  270 |     await expect(page.getByRole('button', { name: 'Clear completed' })).toBeVisible();
  271 |   });
  272 |
  273 |   test('should remove completed items when clicked', async ({ page }) => {
  274 |     const todoItems = page.getByTestId('todo-item');
  275 |     await todoItems.nth(1).getByRole('checkbox').check();
  276 |     await page.getByRole('button', { name: 'Clear completed' }).click();
  277 |     await expect(todoItems).toHaveCount(2);
  278 |     await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]]);
  279 |   });
  280 |
  281 |   test('should be hidden when there are no items that are completed', async ({ page }) => {
  282 |     await page.locator('.todo-list li .toggle').first().check();
  283 |     await page.getByRole('button', { name: 'Clear completed' }).click();
  284 |     await expect(page.getByRole('button', { name: 'Clear completed' })).toBeHidden();
  285 |   });
  286 | });
  287 |
  288 | test.describe('Persistence', () => {
  289 |   test(
  290 |     'get started f',
  291 |     {
  292 |       tag: '@devRun'
  293 |     },
  294 |     async ({ page }) => {
  295 |     // create a new todo locator
  296 |       const newTodo = page.getByPlaceholder('What needs to be done?');
  297 |
  298 |       for (const item of TODO_ITEMS.slice(0, 2)) {
  299 |         await newTodo.fill(item);
  300 |         await newTodo.press('Enter');
  301 |       }
  302 |
  303 |       const todoItems = page.getByTestId('todo-item');
  304 |       const firstTodoCheck = todoItems.nth(0).getByRole('checkbox');
> 305 |       await firstTodoCheck.check();
      |                            ^ Error: locator.check: Test timeout of 30000ms exceeded.
  306 |       await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]]);
  307 |       await expect(firstTodoCheck).toBeChecked();
  308 |       await expect(todoItems).toHaveClass(['completed', '']);
  309 |
  310 |       // Ensure there is 1 completed item.
  311 |       await checkNumberOfCompletedTodosInLocalStorage(page, 1);
  312 |
  313 |       // Now reload.
  314 |       await page.reload();
  315 |       await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]]);
  316 |       await expect(firstTodoCheck).toBeChecked();
  317 |       await expect(todoItems).toHaveClass(['completed', '']);
  318 |     });
  319 | });
  320 |
  321 | test.describe('Routing', () => {
  322 |   test.beforeEach(async ({ page }) => {
  323 |     await createDefaultTodos(page);
  324 |     // make sure the app had a chance to save updated todos in storage
  325 |     // before navigating to a new view, otherwise the items can get lost :(
  326 |     // in some frameworks like Durandal
  327 |     await checkTodosInLocalStorage(page, TODO_ITEMS[0]);
  328 |   });
  329 |
  330 |   test('should allow me to display active items', async ({ page }) => {
  331 |     const todoItem = page.getByTestId('todo-item');
  332 |     await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();
  333 |
  334 |     await checkNumberOfCompletedTodosInLocalStorage(page, 1);
  335 |     await page.getByRole('link', { name: 'Active' }).click();
  336 |     await expect(todoItem).toHaveCount(2);
  337 |     await expect(todoItem).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]]);
  338 |   });
  339 |
  340 |   test('should respect the back button', async ({ page }) => {
  341 |     const todoItem = page.getByTestId('todo-item');
  342 |     await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();
  343 |
  344 |     await checkNumberOfCompletedTodosInLocalStorage(page, 1);
  345 |
  346 |     await test.step('Showing all items', async () => {
  347 |       await page.getByRole('link', { name: 'All' }).click();
  348 |       await expect(todoItem).toHaveCount(3);
  349 |     });
  350 |
  351 |     await test.step('Showing active items', async () => {
  352 |       await page.getByRole('link', { name: 'Active' }).click();
  353 |     });
  354 |
  355 |     await test.step('Showing completed items', async () => {
  356 |       await page.getByRole('link', { name: 'Completed' }).click();
  357 |     });
  358 |
  359 |     await expect(todoItem).toHaveCount(1);
  360 |     await page.goBack();
  361 |     await expect(todoItem).toHaveCount(2);
  362 |     await page.goBack();
  363 |     await expect(todoItem).toHaveCount(3);
  364 |   });
  365 |
  366 |   test('should allow me to display completed items', async ({ page }) => {
  367 |     await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();
  368 |     await checkNumberOfCompletedTodosInLocalStorage(page, 1);
  369 |     await page.getByRole('link', { name: 'Completed' }).click();
  370 |     await expect(page.getByTestId('todo-item')).toHaveCount(1);
  371 |   });
  372 |
  373 |   test('should allow me to display all items', async ({ page }) => {
  374 |     await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();
  375 |     await checkNumberOfCompletedTodosInLocalStorage(page, 1);
  376 |     await page.getByRole('link', { name: 'Active' }).click();
  377 |     await page.getByRole('link', { name: 'Completed' }).click();
  378 |     await page.getByRole('link', { name: 'All' }).click();
  379 |     await expect(page.getByTestId('todo-item')).toHaveCount(3);
  380 |   });
  381 |
  382 |   test('should highlight the currently applied filter', async ({ page }) => {
  383 |     await expect(page.getByRole('link', { name: 'All' })).toHaveClass('selected');
  384 |
  385 |     // create locators for active and completed links
  386 |     const activeLink = page.getByRole('link', { name: 'Active' });
  387 |     const completedLink = page.getByRole('link', { name: 'Completed' });
  388 |     await activeLink.click();
  389 |
  390 |     // Page change - active items.
  391 |     await expect(activeLink).toHaveClass('selected');
  392 |     await completedLink.click();
  393 |
  394 |     // Page change - completed items.
  395 |     await expect(completedLink).toHaveClass('selected');
  396 |   });
  397 | });
  398 |
  399 | async function createDefaultTodos(page: Page) {
  400 |   // create a new todo locator
  401 |   const newTodo = page.getByPlaceholder('What needs to be done?');
  402 |
  403 |   for (const item of TODO_ITEMS) {
  404 |     await newTodo.fill(item);
  405 |     await newTodo.press('Enter');
```