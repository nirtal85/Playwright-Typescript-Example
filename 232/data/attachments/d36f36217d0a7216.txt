# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Item >> should allow me to mark items as complete
- Location: /__w/Playwright-Typescript-Example/Playwright-Typescript-Example/tests/demo-todo-app.spec.ts:120:3

# Error details

```
Error: locator.check: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByTestId('todo-item').first().getByRole('checkbox')

    at /__w/Playwright-Typescript-Example/Playwright-Typescript-Example/tests/demo-todo-app.spec.ts:132:43
```

# Page snapshot

```yaml
- text: This is just a demo of TodoMVC for testing, not the
- link "real TodoMVC app."
- heading "todos" [level=1]
- textbox "What needs to be done?"
- checkbox "❯Mark all as complete"
- text: ❯Mark all as complete
- list:
  - listitem:
    - checkbox "Toggle Todo"
    - text: buy some cheese
  - listitem:
    - checkbox "Toggle Todo"
    - text: feed the cat
- strong: "2"
- text: items left
- list:
  - listitem:
    - link "All"
  - listitem:
    - link "Active"
  - listitem:
    - link "Completed"
- contentinfo:
  - paragraph: Double-click to edit a todo
  - paragraph:
    - text: Created by
    - link "Remo H. Jansen"
  - paragraph:
    - text: Part of
    - link "TodoMVC"
```

# Test source

```ts
   32 |     // create a new todo locator
   33 |     const newTodo = page.getByPlaceholder('What needs to be done?');
   34 |
   35 |     // Create one todo item.
   36 |     await newTodo.fill(TODO_ITEMS[0]);
   37 |     await newTodo.press('Enter');
   38 |
   39 |     // Check that input is empty.
   40 |     await expect(newTodo).toBeEmpty();
   41 |     await checkNumberOfTodosInLocalStorage(page, 1);
   42 |   });
   43 |
   44 |   test('should append new items to the bottom of the list', async ({ page }) => {
   45 |     // Create 3 items.
   46 |     await createDefaultTodos(page);
   47 |
   48 |     // create a todo count locator
   49 |     const todoCount = page.getByTestId('todo-count');
   50 |
   51 |     // Check test using different methods.
   52 |     await expect(page.getByText('3 items left')).toBeVisible();
   53 |     await expect(todoCount).toHaveText('3 items left');
   54 |     await expect(todoCount).toContainText('3');
   55 |     await expect(todoCount).toHaveText(/3/);
   56 |
   57 |     // Check all items in one call.
   58 |     await expect(page.getByTestId('todo-title')).toHaveText(TODO_ITEMS);
   59 |     await checkNumberOfTodosInLocalStorage(page, 3);
   60 |   });
   61 | });
   62 |
   63 | test.describe('Mark all as completed', () => {
   64 |   test.beforeEach(async ({ page }) => {
   65 |     await createDefaultTodos(page);
   66 |     await checkNumberOfTodosInLocalStorage(page, 3);
   67 |   });
   68 |
   69 |   test.afterEach(async ({ page }) => {
   70 |     await checkNumberOfTodosInLocalStorage(page, 3);
   71 |   });
   72 |
   73 |   test('should allow me to mark all items as completed', async ({ page }) => {
   74 |     // Complete all todos.
   75 |     await page.getByLabel('Mark all as complete').check();
   76 |
   77 |     // Ensure all todos have 'completed' class.
   78 |     await expect(page.getByTestId('todo-item')).toHaveClass([
   79 |       'completed',
   80 |       'completed',
   81 |       'completed'
   82 |     ]);
   83 |     await checkNumberOfCompletedTodosInLocalStorage(page, 3);
   84 |   });
   85 |
   86 |   test('should allow me to clear the complete state of all items', async ({ page }) => {
   87 |     const toggleAll = page.getByLabel('Mark all as complete');
   88 |     // Check and then immediately uncheck.
   89 |     await toggleAll.check();
   90 |     await toggleAll.uncheck();
   91 |
   92 |     // Should be no completed classes.
   93 |     await expect(page.getByTestId('todo-item')).toHaveClass(['', '', '']);
   94 |   });
   95 |
   96 |   test('complete all checkbox should update state when items are completed / cleared', async ({
   97 |     page
   98 |   }) => {
   99 |     const toggleAll = page.getByLabel('Mark all as complete');
  100 |     await toggleAll.check();
  101 |     await expect(toggleAll).toBeChecked();
  102 |     await checkNumberOfCompletedTodosInLocalStorage(page, 3);
  103 |
  104 |     // Uncheck first todo.
  105 |     const firstTodo = page.getByTestId('todo-item').nth(0);
  106 |     await firstTodo.getByRole('checkbox').uncheck();
  107 |
  108 |     // Reuse toggleAll locator and make sure its not checked.
  109 |     await expect(toggleAll).not.toBeChecked();
  110 |
  111 |     await firstTodo.getByRole('checkbox').check();
  112 |     await checkNumberOfCompletedTodosInLocalStorage(page, 3);
  113 |
  114 |     // Assert the toggle all is checked again.
  115 |     await expect(toggleAll).toBeChecked();
  116 |   });
  117 | });
  118 |
  119 | test.describe('Item', () => {
  120 |   test('should allow me to mark items as complete', async ({ page }) => {
  121 |     // create a new todo locator
  122 |     const newTodo = page.getByPlaceholder('What needs to be done?');
  123 |
  124 |     // Create two items.
  125 |     for (const item of TODO_ITEMS.slice(0, 2)) {
  126 |       await newTodo.fill(item);
  127 |       await newTodo.press('Enter');
  128 |     }
  129 |
  130 |     // Check first item.
  131 |     const firstTodo = page.getByTestId('todo-item').nth(0);
> 132 |     await firstTodo.getByRole('checkbox').check();
      |                                           ^ Error: locator.check: Test timeout of 30000ms exceeded.
  133 |     await expect(firstTodo).toHaveClass('completed');
  134 |
  135 |     // Check second item.
  136 |     const secondTodo = page.getByTestId('todo-item').nth(1);
  137 |     await expect(secondTodo).not.toHaveClass('completed');
  138 |     await secondTodo.getByRole('checkbox').check();
  139 |
  140 |     // Assert completed class.
  141 |     await expect(firstTodo).toHaveClass('completed');
  142 |     await expect(secondTodo).toHaveClass('completed');
  143 |   });
  144 |
  145 |   test('should allow me to un-mark items as complete', async ({ page }) => {
  146 |     // create a new todo locator
  147 |     const newTodo = page.getByPlaceholder('What needs to be done?');
  148 |
  149 |     // Create two items.
  150 |     for (const item of TODO_ITEMS.slice(0, 2)) {
  151 |       await newTodo.fill(item);
  152 |       await newTodo.press('Enter');
  153 |     }
  154 |
  155 |     const firstTodo = page.getByTestId('todo-item').nth(0);
  156 |     const secondTodo = page.getByTestId('todo-item').nth(1);
  157 |     const firstTodoCheckbox = firstTodo.getByRole('checkbox');
  158 |
  159 |     await firstTodoCheckbox.check();
  160 |     await expect(firstTodo).toHaveClass('completed');
  161 |     await expect(secondTodo).not.toHaveClass('completed');
  162 |     await checkNumberOfCompletedTodosInLocalStorage(page, 1);
  163 |
  164 |     await firstTodoCheckbox.uncheck();
  165 |     await expect(firstTodo).not.toHaveClass('completed');
  166 |     await expect(secondTodo).not.toHaveClass('completed');
  167 |     await checkNumberOfCompletedTodosInLocalStorage(page, 0);
  168 |   });
  169 |
  170 |   test('should allow me to edit an item', async ({ page }) => {
  171 |     await createDefaultTodos(page);
  172 |
  173 |     const todoItems = page.getByTestId('todo-item');
  174 |     const secondTodo = todoItems.nth(1);
  175 |     await secondTodo.dblclick();
  176 |     await expect(secondTodo.getByRole('textbox', { name: 'Edit' })).toHaveValue(TODO_ITEMS[1]);
  177 |     await secondTodo.getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');
  178 |     await secondTodo.getByRole('textbox', { name: 'Edit' }).press('Enter');
  179 |
  180 |     // Explicitly assert the new text value.
  181 |     await expect(todoItems).toHaveText([TODO_ITEMS[0], 'buy some sausages', TODO_ITEMS[2]]);
  182 |     await checkTodosInLocalStorage(page, 'buy some sausages');
  183 |   });
  184 | });
  185 |
  186 | test.describe('Editing', () => {
  187 |   test.beforeEach(async ({ page }) => {
  188 |     await createDefaultTodos(page);
  189 |     await checkNumberOfTodosInLocalStorage(page, 3);
  190 |   });
  191 |
  192 |   test('should hide other controls when editing', async ({ page }) => {
  193 |     const todoItem = page.getByTestId('todo-item').nth(1);
  194 |     await todoItem.dblclick();
  195 |     await expect(todoItem.getByRole('checkbox')).toBeHidden();
  196 |     await expect(
  197 |       todoItem.locator('label', {
  198 |         hasText: TODO_ITEMS[1]
  199 |       })
  200 |     ).toBeHidden();
  201 |     await checkNumberOfTodosInLocalStorage(page, 3);
  202 |   });
  203 |
  204 |   test('should save edits on blur', async ({ page }) => {
  205 |     const todoItems = page.getByTestId('todo-item');
  206 |     await todoItems.nth(1).dblclick();
  207 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');
  208 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).dispatchEvent('blur');
  209 |
  210 |     await expect(todoItems).toHaveText([TODO_ITEMS[0], 'buy some sausages', TODO_ITEMS[2]]);
  211 |     await checkTodosInLocalStorage(page, 'buy some sausages');
  212 |   });
  213 |
  214 |   test('should trim entered text', async ({ page }) => {
  215 |     const todoItems = page.getByTestId('todo-item');
  216 |     await todoItems.nth(1).dblclick();
  217 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('    buy some sausages    ');
  218 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter');
  219 |
  220 |     await expect(todoItems).toHaveText([TODO_ITEMS[0], 'buy some sausages', TODO_ITEMS[2]]);
  221 |     await checkTodosInLocalStorage(page, 'buy some sausages');
  222 |   });
  223 |
  224 |   test('should remove the item if an empty text string was entered', async ({ page }) => {
  225 |     const todoItems = page.getByTestId('todo-item');
  226 |     await todoItems.nth(1).dblclick();
  227 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('');
  228 |     await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter');
  229 |
  230 |     await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]]);
  231 |   });
  232 |
```